#!/usr/bin/env node
//
//    Converts images applying the 'spiky-clouds' filter
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
const sc = require("spiky-clouds");
const args = require("minimist")(process.argv.slice(2), {boolean: "verbose"});

const help = `Usage: spiky-clouds [-h | -v] [OPTS] INPUT_FILE OUTPUT_FILE
Converts images applying the 'spiky-clouds' filter

Arguments:
  -h, --help        Show this help.
  -v, --version     Shows the software version.
  -s, --seed        Chooses the seed to be used for pseudo random number generation.
  -l, --min-length  Chooses the minimum length of a needle. Default: 0.00 (0%).
  -L, --max-length  Chooses the maximum length of a needle. Default: 0.02 (2%).
  -w, --min-width   Chooses the minimum width of a needle. Default: 0.0005 (0.05%).
  -W, --max-width   Chooses the maximum width of a needle. Default: 0.001 (0.1%).
  -a, --alpha       Sets the value for the alpha channel for the needles. Default: 255
  -r, --rotation    Chooses the mode in which the needles align. Default: "min_gradient".
    Available modes:
      min_gradient  Draws the needles in the direction of the smallest gradient.
      max_gradient  Draws the needles in the direction of the largest gradient.
      random        Draws the needles randomly.
  -g, --angles:     Limits the available angles (in radians) for the rotation modes, eg: "[0, PI]" - horizontal needles.
  --verbose:        Shows the progress of the render
`;

(() => {
  if ((args.v) || (args.version)) {
    console.log(pc.VERSION);
  } else if ((args.h) || (args.help) || args._.length < 2) {
    console.log(help);
  } else {
    opts = {
      verbose: !!args.verbose
    };
    allOpts = {
      "seed": ["seed", "s"],
      "minLength": ["min-length", "l"],
      "maxLength": ["max-length", "L"],
      "minWidth": ["min-width", "w"],
      "maxWidth": ["max-width", "W"],
      "alpha": ["alpha", "a"],
      "rotation": ["rotation", "r"],
      "angles": ["angles", "g"],
    };
    for (const opt in allOpts) {
      const option = allOpts[opt];
      for (let i=0; i<option.length; i++) {
        if (args[option[i]] != null) {
          opts[opt] = args[option[i]];
          if (opt == "angles") {
            try {
              opts[opt] = args[option[i]].split(",").map(item => parseInt(item));
            } catch (e) {
              console.log('Angles must be a comma separated list of integers, eg: "45, 90, 135');
              return;
            }
          }
        }
      }
    }
    sc(args._[0], args._[1], opts);
  }
})();
